# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in
Markdown format based on an existing Product Requirements Document (PRD). The
task list should guide a developer through a test-driven implementation
workflow.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/docs/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g.,
  `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file.
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements,
    user stories, and other sections of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the
    file and generate the main, high-level tasks required to implement the
    feature. Present these tasks to the user in the specified format (without
    sub-tasks yet). Inform the user: "I have generated the high-level tasks
    based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to
    proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each
    parent task into smaller, actionable sub-tasks. Each parent task block
    must include a testing sub-task and conclude with an acceptance criteria
    sub-task for committing the work.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential
    files that will need to be created or modified. List these under the
    `Relevant Files` section, including corresponding test files.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant
    files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/docs/tasks/`
    directory with the filename `tasks-[prd-file-name].md`.

## Output Format

The generated task list _must_ follow this structure:

````markdown
## Git Workflow

1.  **Create a new branch:** Before starting, create a new feature branch from
    `develop`:
    ```bash
    git checkout develop
    git pull origin develop
    git checkout -b feature/your-feature-name
    ```

## Relevant Files

- `path/to/potential/file1.ts` - Brief description of why this file is
  relevant.
- `path/to/file1.test.ts` - Unit tests for `file1.ts`.
- `path/to/another/file.tsx` - Brief description.
- `path/to/another/file.test.tsx` - Unit tests for `another/file.tsx`.

### Notes

- After completing the tests for each major task, commit the changes. This
  ensures each step is a stable, verified checkpoint.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
  - [ ] 1.3 **Test:** [Description of what to test for this task block]
  - [ ] 1.4 **Acceptance:** Commit the changes with a descriptive message (e.g.,
    `feat(scope): complete step 1 of feature X`).

- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
  - [ ] 2.2 **Test:** [Description of what to test for this task block]
  - [ ] 2.3 **Acceptance:** Commit the changes (`feat(scope): complete step 2`).
````

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user
confirmation ("Go") before proceeding to generate the detailed sub-tasks. This
ensures the high-level plan aligns with user expectations before diving into
details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will
implement the feature.
